"""
Generates a GUI to solicit user input and return search results.

Created by Amit Rubinstein (March 2021)
"""
import PySimpleGUI as sg
import datetime
import webbrowser
import pandas as pd
import ast

sg.theme('DarkGrey11') 

#Displays a pop-up error message window.
def errorWindow(error_message):
    layout = [
        [sg.Text(error_message, font=("Source Sans Bold", 14))]
    ]

    window = sg.Window("Error", layout)
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED:
            break
    window.close()

#Formats a given time variable for use with datetime library
def addZeroPadding(time_input):
    if len(time_input) == 7:
        time_input = "0" + time_input
    return time_input

#Sets the current time generated by datetime to the next 30min interval (e.g., 7:48 PM = 8PM, 9:11 AM = 9:30AM, 11:48 AM = 12:00 PM).
def formatCurrentTime(time_input):
    time_input = list(time_input)
    hour = int("".join(time_input[0:2]))
    minutes = "".join(time_input[3:5])
    ampm = "".join(time_input[6:8])
    if minutes != "00" and int(minutes) < 30:
        time_input[3] = "3"
        time_input[4] = "0"
    elif minutes != "00" and int(minutes) > 30:
        time_input[3] = "0"
        time_input[4] = "0"
        hour = hour + 1
        if hour == 12 and ampm == "AM":
            time_input[6] = "P"
        elif hour == 12 and ampm == "PM":
            time_input[6] = "A"
        elif hour > 12:
            hour = hour - 12
        if hour >= 10:
            time_input[0] = str(hour)[0]
            time_input[1] = str(hour)[1]
        else:
            time_input[0] = "0"
            time_input[1] = str(hour)[0]
    if time_input[0] == "0":
        time_input = time_input[1:]
    return "".join(time_input)

#Displays a UI to solicit input from the user
def getUserInput():
    times = ["12:00 AM", "12:30 AM", "1:00 AM", "1:30 AM", "2:00 AM", "2:30 AM", "3:00 AM", "3:30 AM", "4:00 AM", "4:30 AM", "5:00 AM", "5:30 AM", "6:00 AM", "6:30 AM", 
    "7:00 AM", "7:30 AM", "8:00 AM", "8:30 AM", "9:00 AM", "9:30 AM", "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM", "12:00 PM", "12:30 PM", "1:00 PM", "1:30 PM",
    "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM", "4:30 PM", "5:00 PM", "5:30 PM", "6:00 PM", "6:30 PM", "7:00 PM", "7:30 PM", "8:00 PM", "8:30 PM", "9:00 PM",
    "9:30 PM", "10:00 PM", "10:30 PM", "11:00 PM", "11:30 PM"] 
    party_sizes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]

    layout = [
        [sg.Text("Find Your Table", justification="center", size=(45,1), font=("Source Sans Bold", 25))],
        [sg.Text("")],
        [sg.CalendarButton("Date", font=("Source Sans Bold", 14), close_when_date_chosen=True, target="date_input", no_titlebar=False, format='%m/%d/%Y'), sg.Input(key="date_input", size=(15,1), font=("Source Sans Bold", 14), default_text=datetime.datetime.now().strftime("%m/%d/%Y")), 
        sg.Text("Time", font=("Source Sans Bold", 14)), sg.Combo(times, font=("Source Sans Bold", 14), key="time_input", readonly=True, default_value=formatCurrentTime(datetime.datetime.now().strftime("%I:%M %p"))), sg.Text("Party Size", font=("Source Sans Bold", 14)), 
        sg.Combo(party_sizes, font=("Source Sans Bold", 14), key="party_input", readonly=True, default_value=2), sg.Text("Neighborhood", font=("Source Sans Bold", 14)), sg.Input(size=(15,1), font=("Source Sans Bold", 14), key="hood_input", tooltip="Example: Murray Hill")],
        [sg.Text("")],
        [sg.Button("Submit", font=("Source Sans Bold", 14)), sg.Exit(font=("Source Sans Bold", 14))]
        ]

    window = sg.Window('Reservation Details', layout)

    #Loop for open UI window to run
    while True:
        event, values = window.read()
        #Data validation when submit is hit
        if event == "Submit":
            date = values["date_input"]
            time = values["time_input"]
            party_size = values["party_input"]
            hood = values["hood_input"]
            values.pop("Date")
            if "" in values.values():
                errorWindow("Please complete all the fields")
            else:
                try:
                    datetime.datetime.strptime(values["date_input"], "%m/%d/%Y")
                except:
                    errorWindow("Please enter a valid date format \"MM/DD/YYYY\" ")
                    continue
                if datetime.datetime.strptime(values["date_input"]+" "+addZeroPadding(values["time_input"]), "%m/%d/%Y %I:%M %p") < datetime.datetime.now():
                    values["date_input"] = datetime.datetime.now().strftime("%m/%d/%Y")
                    values["time_input"] = formatCurrentTime(datetime.datetime.now().strftime("%I:%M %p"))
                    break
                else:
                    break
        #Quit if the window is closed or "Exit" is selected
        if event in (sg.WIN_CLOSED, 'Exit'):
            quit()
    window.close()
    return date, time, party_size, hood

def showSearchResults(df, date, time, party_size, hood):
    layout = [
        [sg.Text("Search Results", justification="center", size=(45,1), font=("Source Sans Bold", 25))],
        [sg.Text(size=(28,1)), sg.Image(filename = "smallCal.png"), sg.Text(date, justification="center", font=("Source Sans Bold", 16)), 
        sg.Image(filename = "smallTime.png"), sg.Text(time, font=("Source Sans Bold", 16)),
        sg.Image(filename = "smallParty.png"), sg.Text(party_size, font=("Source Sans Bold", 16)),
        sg.Image(filename = "smallLoc.png"), sg.Text(hood, font=("Source Sans Bold", 16))],
        [sg.Text()],
        ]
    
    for index, row in df.iterrows():
        layout.append([sg.Text(row["name"],font=("Source Sans Bold", 20)), 
        sg.Text("("+("$"*row["priceBand"])+" â€¢ "+row["primaryCuisine"]+")", font=("Source Sans Bold", 14))])
        if row["yelp rating"] == 4:
            layout.append([sg.Image(filename = "4Stars.png"), sg.Text(row["yelp rating"], font=("Source Sans Bold", 14))])
        elif row["yelp rating"] == 5:
            layout.append([sg.Image(filename = "5Stars.png"), sg.Text(row["yelp rating"], font=("Source Sans Bold", 14))])
        else:
            layout.append([sg.Image(filename = "45Stars.png"), sg.Text(row["yelp rating"], font=("Source Sans Bold", 14))])
        layout.append([sg.Text("Available Times:", font=("Source Sans Bold", 14))])
        times = ast.literal_eval(row["times"])
        for i in times:
            print(i)
            time = datetime.datetime.strptime(i[:-6], "%Y-%m-%dT%H:%M:%S").strftime("%I:%M %p")
            layout[-1].append(sg.Button(button_text=time, image_filename = "Button.png", image_subsample=2, font=("Source Sans Bold", 14), enable_events=True, key=row["name"]+"-link"))
        layout.append([sg.HorizontalSeparator()])
    
    window = sg.Window('Available Reservations', layout)
    while True:
        event, values = window.read()
        print(event, values)
        if event[:event.find("-link")] in df["name"].values:
            print(df.loc[df["name"]==event[:event.find("-link")], "urls"].iloc[0])
            webbrowser.open(df.loc[df["name"]==event[:event.find("-link")], "urls"].iloc[0])
        if event == sg.WIN_CLOSED:
            break
    window.close()
    #df.to_csv("OTrestaurants.csv")
    #layout = [
    #    [sg.Text("Available Reservations", justification="center", size=(45,1), font=("Source Sans Bold", 25))],
    #    [sg.Text(""``)],
